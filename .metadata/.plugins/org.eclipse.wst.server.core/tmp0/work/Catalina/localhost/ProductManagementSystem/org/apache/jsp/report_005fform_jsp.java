/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.100
 * Generated at: 2025-05-28 01:32:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class report_005fform_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

    String type = (String) request.getAttribute("type");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Report Criteria</title>\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            background-color: #f8f9fa;\r\n");
      out.write("        }\r\n");
      out.write("        .card {\r\n");
      out.write("            border-radius: 1rem;\r\n");
      out.write("            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class=\"container mt-5\">\r\n");
      out.write("    <div class=\"card mx-auto\" style=\"max-width: 600px;\">\r\n");
      out.write("        <div class=\"card-header bg-primary text-white\">\r\n");
      out.write("            <h4 class=\"mb-0\">Enter Criteria for Report</h4>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"card-body\">\r\n");
      out.write("            <form action=\"ReportServlet\" method=\"post\" class=\"needs-validation\" novalidate>\r\n");
      out.write("                <input type=\"hidden\" name=\"type\" value=\"");
      out.print( type );
      out.write("\"/>\r\n");
      out.write("\r\n");
      out.write("                ");
 if ("price".equals(type)) { 
      out.write("\r\n");
      out.write("                    <div class=\"mb-3\">\r\n");
      out.write("                        <label for=\"price\" class=\"form-label\">Price Greater Than</label>\r\n");
      out.write("                        <input type=\"number\" step=\"0.01\" class=\"form-control\" id=\"price\" name=\"price\" required min=\"0\">\r\n");
      out.write("                        <div class=\"invalid-feedback\">Please enter a valid price.</div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                ");
 } else if ("category".equals(type)) { 
      out.write("\r\n");
      out.write("                    <div class=\"mb-3\">\r\n");
      out.write("                        <label for=\"category\" class=\"form-label\">Category</label>\r\n");
      out.write("                        <input type=\"text\" class=\"form-control\" id=\"category\" name=\"category\" required maxlength=\"50\">\r\n");
      out.write("                        <div class=\"invalid-feedback\">Please enter a category.</div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                ");
 } else if ("top".equals(type)) { 
      out.write("\r\n");
      out.write("                    <div class=\"mb-3\">\r\n");
      out.write("                        <label for=\"limit\" class=\"form-label\">Top N Products (by Quantity)</label>\r\n");
      out.write("                        <input type=\"number\" class=\"form-control\" id=\"limit\" name=\"limit\" required min=\"1\" max=\"100\">\r\n");
      out.write("                        <div class=\"invalid-feedback\">Please enter a valid number between 1 and 100.</div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                ");
 } else { 
      out.write("\r\n");
      out.write("                    <div class=\"alert alert-danger\">Invalid report type selected.</div>\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("                <div class=\"d-flex justify-content-between mt-4\">\r\n");
      out.write("                    <button type=\"submit\" class=\"btn btn-success\">Generate Report</button>\r\n");
      out.write("                    <a href=\"reports.jsp\" class=\"btn btn-secondary\">Back</a>\r\n");
      out.write("                </div>\r\n");
      out.write("            </form>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("(() => {\r\n");
      out.write("    'use strict';\r\n");
      out.write("    const forms = document.querySelectorAll('.needs-validation');\r\n");
      out.write("    Array.from(forms).forEach(form => {\r\n");
      out.write("        form.addEventListener('submit', event => {\r\n");
      out.write("            if (!form.checkValidity()) {\r\n");
      out.write("                event.preventDefault();\r\n");
      out.write("                event.stopPropagation();\r\n");
      out.write("            }\r\n");
      out.write("            form.classList.add('was-validated');\r\n");
      out.write("        }, false);\r\n");
      out.write("    });\r\n");
      out.write("})();\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
